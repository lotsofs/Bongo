<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label165.Text" xml:space="preserve">
    <value>Next to the .exe for this bingo tool you'll find a folder called 'goals'. In this folder there are more subfolders, one for each game. Inside these folders is a goals.xml file, which contains the various goals. 

Simply overwrite an existing goals.xml, or create a new folder and place the goals.xml file in there. Restarting the tool may be necessary to get it to recognize new folders.
</value>
  </data>
  <data name="label37.Text" xml:space="preserve">
    <value>This function I used for global hotkeys is retarded, and therefore any global hotkeys bound will not do anything anymore except for act as hotkeys for this tool. Until I find an alternative function for hotkeys, I recommend you either use hotkeys with modifiers (such as control) or don't forget the Unhide Board hotkey when using hotkeys without modifiers.
Anyway, enjoy this shitty UI</value>
  </data>
  <data name="label164.Text" xml:space="preserve">
    <value>If the board was premade by someone specifically, and not randomly generated, they will have sent you an XML. Place this in the same location just like any other XML goals file. Then simply hit Generate, no configuration required.</value>
  </data>
  <data name="label28.Text" xml:space="preserve">
    <value>If someone else has already generated a board, simply type or paste their unique board ID (5-8 digits) in here, and hit 'Generate' at the bottom. You do not need to configure any settings. This information is stored in the unique board ID.
</value>
  </data>
  <data name="label30.Text" xml:space="preserve">
    <value>* Select the goals file at the bottom. 
* Configure the settings above, then hit generate at the bottom. Send the Unique Board ID to the other participants. 
* If someone else has already generated a board, then have them send the Unique Board ID to you and use the Load Board tab instead.
* Make sure your goals files match.</value>
  </data>
  <metadata name="backgroundWorkerReceive.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>45</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAC4BAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAABH9J
        REFUeNrt3T9y00wYwGGL4RwZKjo1DrfhALQ5SloOwG2IG3VUTC4iKhiPsTySLWn33fd52nyQ7OrdX4z/
        6DscAAAAAICmdTe+NjayFuuwDuuYWMeHYIsAViQAIACAAAACAAgAIACAAAACAAgAIACAAAACAAgAIACA
        AAACAAgAIACAAAACAAgAIACAAAACAAgAIACAAAACAAgAIACAAAACAAgAIACAAAACAAgACIAtAAEABAAQ
        AEAAAAAAAAAAgIi6G18bG1pLC1q5HquvYxiGxX+m73tzdW8A7tnwFS9I+gAs2f8V9nX297z4XpsFYOf5
        a3quPtbyg5xf1LWGlrZscfDP/+6Mc1flOwGHYdj0Yjs08dZgHhIFoKXhtY9mQAAMAK69ABgEezj3Z3XN
        91HNk4CFlHpprfVXLMxUkJnaNAC3nlVdWvisz9KuKcIePvKbf87aPLLYMQBzLpYLIgKPHM6la7n877PP
        X/HnAPxWZ6/DP/V3ZJ5BdwRy2MLZ4tBmjYAAiECon8UjRgEAsgVA+ddXw6MAv/2TB8CrANuYe1ii7L/D
        32AA5g6fi+/Q0FgAHP56eBSW16ZvBHp0sBz+x/V9X+0B90ugvCqfBMz+5owt9nOtw0hbqvowkENfVuTP
        W6wZsExzWFUALi+iIKyn5n8KUI47AiWLgD0nTAD+DqSh3H/PEQBD2SD/rOJcsRuCONR1cwOWHIo+Alj6
        cp9grLfv9pviAVg6kNhz1lXNy4BzX6by0HRfNez3nJ/BKxz3cT+AxEofbCEXAAJEINp9AxAAQACYo+RD
        ca8CCYCLmzwC5kQAQASyBsCNIetQam/v+b4i0EAAfNBHBB6NwNwZMmfXVX1LsB2G0/+ltxEVHfBQM+U5
        AP4T6VEASQJgOHJwnQXAUCTfc9dbAP4NgmHIGwHXfntV3RS0luGjvjnY40m+jDNX1ceBqfMA1vAM+1Yh
        MHcAAAAAAECbbn1wYWxkLdZhHdYxsQ4fBoLEBAAEABAAQAAAAQAEABAAQAAAAQAEABAAQAAAAQAEABAA
        QAAAAQAEABAAQAAAAQAEABAAQAAAAQAEABAAQAAAAQAEABAAQAAAAQAEABAAQAAAAQABsAUgAIAAAAIA
        CAAAAAAAAAAQUTf1he/Hn2OkhXw7fbm6lqfXMdQ63l+6q+s4vh1DreP0fLq6jvFwCLWObuKM/PrxKdQ6
        Pn/9fXUd3gcAiQkACAAgAIAAAAIACAAgAIAAAAIACAAgAIAAAAIACAAgAIAAAAIACAAgAIAAAAIACAAg
        AIAAAAIACAAgAIAAAAIACAAgAIAAAAIACAAgAIAAAAIAAmALQAAAAQAEABAAAAAAAAAAIKJu6gtPr+MY
        aSHvL13X8jqOb8dQ6zg9n6wjwDq8DwASEwAQAEAAAAEABAAQAEAAAAEABAAQAEAAAAEABAAQAEAAAAEA
        BAAQAEAAAAEABAAQAEAAAAEABAAQAEAAAAEABAAQAEAAAAEABAAQAEAAAAEABAAEwBaAAAACAAgAIAAA
        AAAAAAAAQCh/AKATNurdG5whAAAAAElFTkSuQmCC
</value>
  </data>
</root>